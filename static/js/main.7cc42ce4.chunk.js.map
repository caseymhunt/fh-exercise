{"version":3,"sources":["theme/fhTheme.js","components/Textfield.js","components/Fonts.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["fhTheme","extendTheme","colors","firehydrant","grey","90","70","50","30","10","purple","alert","fonts","body","heading","lineHeights","taller","Textfield","id","placeholder","value","inputType","label","helperText","errorMessage","props","fontScale","fontSize","lineHeight","useToken","purple70","alert70","grey50","sx","color","mb","_hover","_active","_focus","_invalid","defaultValue","type","borderRadius","borderColor","boxShadow","_readOnly","border","backgroundImage","InfoOutline","w","h","mr","defaultProps","isInvalid","isReadOnly","isRequired","Fonts","styles","Sample","title","code","text","rest","width","as","size","spacing","divider","CodeBlock","language","theme","dracula","App","p","mt","href","isExternal","ExternalLink","mx","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7cc42ce4.chunk.js","sourcesContent":["import { extendTheme } from '@chakra-ui/react';\n\nexport const fhTheme = extendTheme({\n  colors: {\n    firehydrant: {\n      grey: {\n        90: '#182042',\n        70: '#536685',\n        50: '#8a9bb7',\n        30: '#c6d0e2',\n        10: '#eef1f6',\n      },\n      purple: {\n        90: '#220e6d',\n        70: '#3b2492',\n        50: '#614ab6',\n        30: '#b2a6e3',\n        10: '#f1edff',\n      },\n      alert: {\n        90: '#89120c',\n        70: '#c6352d',\n        50: '#e17f7a',\n        30: '#f5bfbc',\n        10: '#fceeed',\n      },\n    },\n  },\n  fonts: {\n    body:\n      'Open Sans, Roboto Mono, Roboto, Helvetica, Arial, -apple-system, BlinkMacSystemFont, Segoe UI, sans-serif, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol',\n    heading:\n      'Open Sans, Roboto Mono, Roboto, Helvetica, Arial, -apple-system, BlinkMacSystemFont, Segoe UI, sans-serif, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol',\n  },\n  lineHeights: {\n    taller: '1.7',\n  },\n});\n","import React from 'react';\nimport {\n  Input,\n  FormControl,\n  FormLabel,\n  FormHelperText,\n  FormErrorMessage,\n  useToken,\n} from '@chakra-ui/react';\nimport { InfoOutlineIcon } from '@chakra-ui/icons';\nimport { PropTypes } from 'prop-types';\n\nconst Textfield = ({\n  id,\n  placeholder,\n  value,\n  inputType,\n  label,\n  helperText,\n  errorMessage,\n  ...props\n}) => {\n  // Set up some helpers for font scale based on design specs\n  const fontScale = {\n    5: {\n      fontSize: 'md',\n      lineHeight: 'base',\n    },\n    6: {\n      fontSize: 'sm',\n      lineHeight: 'taller',\n    },\n    7: {\n      fontSize: 'xs',\n      lineHeight: 'taller',\n    },\n  };\n\n  // Grab some color tokens to use in string interpolation styles (ex. boxShadow)\n  const [purple70, alert70, grey50] = useToken('colors', [\n    'firehydrant.purple.70',\n    'firehydrant.alert.70',\n    'firehydrant.grey.50',\n  ]);\n\n  return (\n    <FormControl id={id} {...props}>\n      <FormLabel\n        sx={{ color: 'firehydrant.grey.70', mb: '0.5', ...fontScale[6] }}\n        _hover={{ color: 'firehydrant.purple.50' }}\n        _active={{ color: 'firehydrant.purple.70' }}\n        _focus={{ color: 'firehydrant.purple.70' }}\n        _invalid={{ color: 'firehydrant.alert.70' }}\n      >\n        {label}\n      </FormLabel>\n      <Input\n        defaultValue={value}\n        type={inputType}\n        placeholder={placeholder}\n        sx={{\n          borderRadius: 'base',\n          borderColor: 'firehydrant.grey.50',\n          '&:hover': {\n            borderColor: 'firehydrant.purple.50',\n          },\n          '&:active': {\n            borderColor: 'firehydrant.purple.50',\n          },\n          '&:focus': {\n            borderColor: 'firehydrant.purple.70',\n          },\n        }}\n        _focus={{\n          boxShadow: `0 0 0 3px ${purple70}`,\n        }}\n        _invalid={{\n          borderColor: 'firehydrant.alert.70',\n          '&:hover': {\n            borderColor: 'firehydrant.alert.70',\n          },\n          '&:focus': {\n            borderColor: 'firehydrant.alert.70',\n            boxShadow: `0 0 0 3px ${alert70}`,\n          },\n        }}\n        _readOnly={{\n          border: 'none',\n          // There's no way to style `border-style: dashed` (See: https://developer.mozilla.org/en-US/docs/Web/CSS/border-style),\n          // so we use a background image trick to get a specific style...\n          //\n          // Credit: https://kovart.github.io/dashed-border-generator/\n          backgroundImage: `url(\"data:image/svg+xml,%3csvg width='100%25' height='100%25' xmlns='http://www.w3.org/2000/svg'%3e%3crect width='100%25' height='100%25' fill='none' rx='4' ry='4' stroke='%238A9BB7FF' stroke-width='2' stroke-dasharray='8' stroke-dashoffset='10' stroke-linecap='round'/%3e%3c/svg%3e\")`,\n          '&:focus': {\n            boxShadow: `inset 0 0 0 1px ${grey50}, 0 0 0 3px ${grey50}`,\n          },\n        }}\n      />\n      <FormErrorMessage sx={{ color: 'firehydrant.alert.70', ...fontScale[7] }}>\n        <InfoOutlineIcon w={4} h={4} mr={1} />\n        {errorMessage}\n      </FormErrorMessage>\n      <FormHelperText sx={{ color: 'firehydrant.grey.70', ...fontScale[7] }}>\n        {helperText}\n      </FormHelperText>\n    </FormControl>\n  );\n};\n\nexport default Textfield;\n\nTextfield.propTypes = {\n  id: PropTypes.string.isRequired,\n  inputType: PropTypes.oneOf([\n    'date',\n    'email',\n    'number',\n    'password',\n    'search',\n    'tel',\n    'text',\n    'time',\n    'url',\n  ]),\n  // Label and Helper Text may need to be a 'node' type in the future for more complex compositions, but for\n  // now the design only calls for text so we're going to leave it as string.\n  label: PropTypes.string.isRequired,\n  placeholder: PropTypes.string,\n  value: PropTypes.string,\n  helperText: PropTypes.string,\n  errorMessage: PropTypes.string,\n  isInvalid: PropTypes.bool,\n  isReadOnly: PropTypes.bool,\n  isRequired: PropTypes.bool,\n};\n\nTextfield.defaultProps = {\n  id: 'formcontrol',\n  inputType: 'text',\n  label: 'Label',\n  placeholder: null,\n  value: null,\n  helperText: null,\n  errorMessage: 'Error message',\n  isInvalid: false,\n  isReadOnly: false,\n  isRequired: false,\n};\n","import { Global } from '@emotion/react';\n\nconst Fonts = () => (\n  <Global\n    styles={`\n      /* Copied from https://fonts.googleapis.com/css2?family=Open+Sans&display=swap */\n      /* latin-ext */\n      @font-face {\n      font-family: 'Open Sans';\n      font-style: normal;\n      font-weight: 400;\n      font-display: swap;\n      src: url(https://fonts.gstatic.com/s/opensans/v18/mem8YaGs126MiZpBA-UFW50bf8pkAp6a.woff2) format('woff2');\n      unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n      }\n      /* latin */\n      @font-face {\n      font-family: 'Open Sans';\n      font-style: normal;\n      font-weight: 400;\n      font-display: swap;\n      src: url(https://fonts.gstatic.com/s/opensans/v18/mem8YaGs126MiZpBA-UFVZ0bf8pkAg.woff2) format('woff2');\n      unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n      }\n    `}\n  />\n);\n\nexport default Fonts;\n","import React from 'react';\nimport { CodeBlock, dracula } from 'react-code-blocks';\nimport {\n  Container,\n  ChakraProvider,\n  Stack,\n  StackDivider,\n  Box,\n  Heading,\n  Text,\n  Link,\n} from '@chakra-ui/react';\nimport { fhTheme as theme } from './theme/fhTheme';\nimport Textfield from './components/Textfield';\nimport Fonts from './components/Fonts';\nimport { ExternalLinkIcon } from '@chakra-ui/icons';\n\nconst Sample = ({ title, code, text, ...rest }) => (\n  <Box width=\"full\" {...rest}>\n    <Heading as=\"h2\" size=\"md\" mb={3} color=\"firehydrant.purple.50\">\n      {title}\n    </Heading>\n    <Stack\n      spacing={6}\n      divider={<StackDivider borderColor=\"firehydrant.grey.10\" />}\n    >\n      {code}\n      <Box as={CodeBlock} text={text} language=\"jsx\" theme={dracula} />\n    </Stack>\n  </Box>\n);\n\nfunction App() {\n  return (\n    <ChakraProvider theme={theme}>\n      <Fonts />\n      <Container\n        boxShadow=\"2xl\"\n        p={5}\n        border=\"1px\"\n        borderColor=\"firehydrant.grey.10\"\n        borderRadius=\"md\"\n        mt={8}\n      >\n        <Heading as=\"h1\" size=\"xl\" color=\"firehydrant.purple.90\" mb={4}>\n          Text field examples\n        </Heading>\n        <Text mb={10}>\n          If{' '}\n          <Link\n            href=\"https://primary--601f7495a3b7d300213a4862.chromatic.com\"\n            color=\"blue.600\"\n            isExternal\n          >\n            Storybook <ExternalLinkIcon mx=\"2px\" />\n          </Link>{' '}\n          isn't your thing, here a few examples, along with the code needed to\n          generate it.\n        </Text>\n        <Stack\n          spacing={16}\n          divider={<StackDivider borderColor=\"firehydrant.grey.50\" />}\n        >\n          {/* Default */}\n          <Sample title=\"Default\" code={<Textfield />} text={`<Textfield />`} />\n\n          {/* Label and helper text */}\n          <Sample\n            title=\"Label and helper text\"\n            code={\n              <Textfield\n                label=\"Text field\"\n                helperText=\"Helper text that is helpful.\"\n              />\n            }\n            text={`<Textfield\n  label=\"Text field\"\n  helperText=\"Helper text that is helpful.\"\n/> `}\n          />\n\n          {/* Invalid with error message */}\n          <Sample\n            title=\"Invalid (required)\"\n            code={\n              <Textfield\n                isRequired\n                isInvalid\n                label=\"Email address\"\n                errorMessage=\"This field is required.\"\n              />\n            }\n            text={`<Textfield\n  isRequired\n  isInvalid\n  label=\"Email address\"\n  errorMessage=\"This field is required.\"\n/> `}\n          />\n\n          {/* Read-only */}\n          <Sample\n            title=\"Read only\"\n            code={\n              <Textfield\n                isReadOnly\n                label=\"Today's affirmation:\"\n                value=\"Hey. You're awesome.\"\n              />\n            }\n            text={`<Textfield\n  isReadOnly\n  label=\"Today's affirmation:\"\n  value=\"Hey. You're awesome.\"\n/> `}\n          />\n\n          {/* Using a custom field type (password) */}\n          <Sample\n            title=\"Custom field type\"\n            code={\n              <Textfield\n                inputType=\"password\"\n                label=\"Password\"\n                helperText=\"Your helpful password reminder.\"\n              />\n            }\n            text={`<Textfield\n  inputType=\"password\"\n  label=\"Password\"\n  helperText=\"Your helpful password reminder.\"\n/> `}\n          />\n\n          {/* Showing responsive behavior: half width */}\n          <Sample\n            title=\"Half width\"\n            code={<Textfield />}\n            text={`<Textfield width=\"50%\" />`}\n            width=\"50%\"\n          />\n        </Stack>\n      </Container>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}